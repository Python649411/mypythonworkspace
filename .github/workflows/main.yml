name: Build Kivy Android APK (Docker Strategy - CircleCI with Working Dir)

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: "circleci/android:api-29-node"
      options: --user root
    
    defaults: # ✨ 이 라인 추가 ✨
      run: # ✨ 이 라인 추가 ✨
        working-directory: /home/circleci/project # ✨ 이 라인 추가: CircleCI 이미지의 기본 작업 디렉토리 ✨

    steps:
    - uses: actions/checkout@v2
      with: # ✨ 이 부분 추가: checkout 경로를 컨테이너의 기본 작업 디렉토리와 일치시킴 ✨
        path: /home/circleci/project

    # Java JDK, Python은 컨테이너에 이미 설치되어 있을 가능성이 높지만, 버전을 명확히 하기 위해 설정 유지
    - name: Set up Python (Using Python 3.9)
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install Buildozer dependencies (inside Docker container)
      run: |
        # 컨테이너 내에는 sudo가 필요 없을 수 있지만, 혹시 모르니 남겨둠
        # 컨테이너에는 기본적으로 대부분의 빌드 도구가 설치되어 있음
        apt update && apt install -y git zip unzip # Buildozer 필수 의존성
        
        pip install --user buildozer
        pip install cython # Cython은 Kivy 컴파일에 필수

        # .local/bin 경로를 PATH에 추가 (buildozer 명령어가 실행되도록)
        echo "export PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV
        echo "PATH=$PATH:$HOME/.local/bin" >> $GITHUB_ENV
        
        # Buildozer가 사용하는 경로로 SDK/NDK 심볼릭 링크 설정 (선택 사항이지만 안전을 위해)
        # 컨테이너 이미지에 따라 ANDROID_HOME 및 NDK_HOME은 이미 설정되어 있을 수 있음
        # 혹시 모르니 빌드 환경 변수들을 재설정
        echo "ANDROID_HOME=/opt/android/sdk" >> $GITHUB_ENV # CircleCI 이미지 내 SDK 경로 (이미지마다 다름)
        echo "NDK_HOME=/opt/android/ndk" >> $GITHUB_ENV # CircleCI 이미지 내 NDK 경로
        echo "JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))" >> $GITHUB_ENV


    - name: Aggressive Clean (Before Buildozer run)
      run: |
        # defaults.run.working-directory가 적용되므로 cd 명령은 더 이상 필요 없음
        rm -rf .buildozer
        rm -rf ~/.buildozer

    - name: Build Android APK (using pre-installed SDK in Docker)
      run: |
        set -x # ✨ 모든 명령어 실행 전 출력 (디버깅용) ✨

        echo "Debugging: Starting buildozer android debug directly using Docker environment..."
        # defaults.run.working-directory가 적용되므로 cd 명령은 더 이상 필요 없음
        
        # Buildozer에게 모든 SDK/NDK 다운로드, 설치, 라이선스 동의를 맡김.
        # 컨테이너에 SDK가 이미 있으므로, Buildozer는 기존 SDK를 활용할 것임.
        buildozer android debug

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: Jeommechu-APK
        path: bin/*.apk
        
    - name: Collect Full Build Logs (for debugging)
      if: always() # 빌드 성공/실패 여부와 상관없이 항상 로그 수집
      run: |
        # defaults.run.working-directory가 적용되므로 cd 명령은 더 이상 필요 없음
        LOG_DIR=".buildozer/logs"
        if [ -d "$LOG_DIR" ]; then
            zip -r build_log.zip "$LOG_DIR"/*
            echo "Build log zipped successfully."
        else
            echo "Build log directory not found: $LOG_DIR"
            touch build_log.zip
        fi
        
    - name: Upload Full Build Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: full-build-log
        path: build_log.zip
