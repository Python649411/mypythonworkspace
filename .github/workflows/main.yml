name: Build Kivy Android APK (RC Purge Strategy)

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup Java JDK (Java 17)
      uses: actions/setup-java@v2
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: Set up Python (3.9)
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install Buildozer dependencies
      run: |
        sudo apt update
        sudo apt install -y git zip unzip python3-pip build-essential autoconf libtool screen openjdk-17-jdk curl
        pip install --user buildozer
        pip install cython
        echo "export PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV
        echo "PATH=$PATH:$HOME/.local/bin" >> $GITHUB_ENV
        source /etc/profile || true

    - name: Aggressive Clean
      run: |
        cd ${{ github.workspace }}
        rm -rf .buildozer
        rm -rf ~/.buildozer

    - name: Build Android APK (with RC Purge)
      run: |
        set -x # Debugging
        
        echo "Debugging: Starting main build step..."
        cd ${{ github.workspace }}

        # 1. First run of buildozer to allow it to download SDK and NDK components (including problematic RC versions)
        echo "Debugging: Running buildozer once to ensure basic SDK setup..."
        buildozer android debug --no-build || true # Allow it to fail but setup SDK

        # 2. Locate Android SDK Home
        export ANDROID_HOME="$(find ~/.buildozer -maxdepth 4 -name 'android-sdk' | head -n 1)"
        if [ -z "$ANDROID_HOME" ]; then
            echo "Error: ANDROID_HOME not found after buildozer likely failed SDK setup."
            exit 1
        fi
        
        # 3. Add sdkmanager to PATH for manual control
        SDKMANAGER_PATH=""
        if [ -f "${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager" ]; then
            SDKMANAGER_PATH="${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager"
        elif [ -f "${ANDROID_HOME}/tools/bin/sdkmanager" ]; then
            SDKMANAGER_PATH="${ANDROID_HOME}/tools/bin/sdkmanager"
        fi
        if [ -z "$SDKMANAGER_PATH" ]; then
            echo "Error: sdkmanager executable not found."
            exit 1
        fi
        export PATH="${ANDROID_HOME}/cmdline-tools/latest/bin:${ANDROID_HOME}/platform-tools:${ANDROID_HOME}/cmdline-tools/bin:${ANDROID_HOME}/tools/bin:$PATH"
        
        echo "Debugging: SDK Manager path is: $SDKMANAGER_PATH"
        
        # 4. RC Version Purge Strategy: Delete problematic RC build-tools if they exist
        echo "Debugging: Checking for and purging problematic RC build-tools versions..."
        RC_BUILD_TOOLS_DIR="${ANDROID_HOME}/build-tools"
        if [ -d "$RC_BUILD_TOOLS_DIR" ]; then
            for dir in "$RC_BUILD_TOOLS_DIR"/*; do
                if [[ "$dir" == *"-rc"* ]]; then
                    echo "Debugging: Found problematic RC build-tools: $dir. Deleting..."
                    rm -rf "$dir"
                fi
            done
        fi
        
        # 5. Force install specific stable build-tools (33.0.0) and platform-tools
        echo "Debugging: Force installing stable build-tools;33.0.0 and platform-tools and accepting licenses..."
        yes | "$SDKMANAGER_PATH" "platform-tools" || true
        yes | "$SDKMANAGER_PATH" "build-tools;33.0.0" || true
        yes | "$SDKMANAGER_PATH" --licenses || true # Accept any remaining licenses
        
        # 6. Final buildozer android debug command
        echo "Debugging: Starting final buildozer android debug..."
        buildozer android debug

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: Jeommechu-APK
        path: bin/*.apk
        
    - name: Collect Full Build Logs (for debugging)
      if: always()
      run: |
        cd ${{ github.workspace }}
        LOG_DIR=".buildozer/logs"
        if [ -d "$LOG_DIR" ]; then
            zip -r build_log.zip "$LOG_DIR"/*
            echo "Build log zipped successfully."
        else
            echo "Build log directory not found: $LOG_DIR"
            touch build_log.zip
        fi
        
    - name: Upload Full Build Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: full-build-log
        path: build_log.zip
