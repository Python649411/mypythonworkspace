name: Build Kivy Android APK (Force SDK Install 33.0.0)

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup Java JDK (Java 17 for modern Android builds)
      uses: actions/setup-java@v2
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: Set up Python (Using Python 3.9)
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install Buildozer dependencies and Buildozer itself
      run: |
        sudo apt update
        sudo apt install -y git zip unzip python3-pip build-essential autoconf libtool screen openjdk-17-jdk curl
        
        pip install --user buildozer
        pip install cython

        echo "export PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV
        echo "PATH=$PATH:$HOME/.local/bin" >> $GITHUB_ENV
        
        source /etc/profile || true

    - name: Aggressive Clean and Build APK (Force specific SDK component installation)
      run: |
        set -x

        echo "Debugging: Step starts here."
        echo "Debugging: Current working directory is $(pwd)"
        echo "Debugging: Contents of the GitHub workspace directory (${{ github.workspace }}):"
        ls -la ${{ github.workspace }}
        
        cd ${{ github.workspace }}
        echo "Debugging: Successfully changed directory to ${{ github.workspace }}"

        rm -rf .buildozer
        rm -rf ~/.buildozer

        # --- ✨ 핵심 변경 부분 시작: sdkmanager 직접 통제 ✨ ---
        # 1. Android SDK Command-line Tools 설치 (sdkmanager가 PATH에 들어갈 수 있도록)
        echo "Debugging: Downloading Android Command-line Tools and setting PATH..."
        mkdir -p $HOME/.android
        touch $HOME/.android/repositories.cfg

        echo "ANDROID_HOME=${{ github.workspace }}/.buildozer/android/platform/android-sdk" >> $GITHUB_ENV
        echo "JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))" >> $GITHUB_ENV

        # sdkmanager 다운로드 및 PATH 설정 (curl 404 재시도 로직 포함)
        # 이전 버전의 commandlinetools는 tools/bin 아래에 sdkmanager가 있었으나, 최신 버전은 cmdline-tools/bin 아래에 있음
        # 안정성을 위해 두 경로 모두 추가
        curl -fL --retry 5 --retry-delay 10 https://dl.google.com/android/repository/commandlinetools-linux-current.zip -o android-cmdline-tools.zip
        unzip -q android-cmdline-tools.zip -d $HOME/cmdline-tools
        mkdir -p ${ANDROID_HOME}
        mv $HOME/cmdline-tools/cmdline-tools ${ANDROID_HOME}/cmdline-tools

        echo "sdk.dir=${ANDROID_HOME}" >> $HOME/.gradle/gradle.properties

        export PATH="${ANDROID_HOME}/cmdline-tools/tools/bin:${ANDROID_HOME}/platform-tools:${ANDROID_HOME}/cmdline-tools/bin:$PATH"
        echo "Debugging: sdkmanager should now be in PATH."

        # 2. 모든 라이선스 수동 동의 및 특정 build-tools, platform-tools 강제 설치
        echo "Debugging: Accepting Android SDK licenses and installing specific components..."
        # platform-tools 강제 설치 (Aidl 사용)
        yes | sdkmanager "platform-tools"
        # build-tools 33.0.0 강제 설치 (Aidl not found 방지)
        yes | sdkmanager "build-tools;33.0.0"
        # 그 외 모든 라이선스 동의
        yes | sdkmanager --licenses
        echo "All Android SDK licenses accepted."
        # --- ✨ 핵심 변경 부분 끝 ✨ ---

        # 최종 APK 빌드 시도
        buildozer android debug

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: Jeommechu-APK
        path: bin/*.apk
        
    - name: Collect Full Build Logs (for debugging)
      if: always()
      run: |
        cd ${{ github.workspace }}
        LOG_DIR=".buildozer/logs"
        if [ -d "$LOG_DIR" ]; then
            zip -r build_log.zip "$LOG_DIR"/*
            echo "Build log zipped successfully."
        else
            echo "Build log directory not found: $LOG_DIR"
            touch build_log.zip
        fi
        
    - name: Upload Full Build Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: full-build-log
        path: build_log.zip
