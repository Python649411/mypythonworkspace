name: Build Kivy Android APK (Final Buildozer Control)

on:
  push:
    branches: [ master ] # master 브랜치에 코드가 푸시될 때마다 워크플로우 실행
  pull_request:
    branches: [ master ] # master 브랜치로 풀 리퀘스트가 들어올 때 워크플로우 실행

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup Java JDK (Java 17 for modern Android builds)
      uses: actions/setup-java@v2
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: Set up Python (Using Python 3.9 - stable and widely compatible with Kivy/Buildozer)
      uses: actions/setup-python@v2
      with:
        python-version: '3.9' # Python 3.9로 고정 (Kivy/Buildozer와 가장 안정적인 버전)

    - name: Install Buildozer dependencies and Buildozer itself
      run: |
        sudo apt update
        sudo apt install -y git zip unzip python3-pip build-essential autoconf libtool screen openjdk-17-jdk curl # curl은 남겨두자 (다른 의존성 있을까봐)
        
        pip install --user buildozer
        pip install cython # Cython은 Kivy 컴파일에 필수

        # .local/bin 경로를 PATH에 추가 (buildozer 명령어가 실행되도록)
        echo "export PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV # $HOME/.bashrc 대신 $GITHUB_ENV 사용
        echo "PATH=$PATH:$HOME/.local/bin" >> $GITHUB_ENV
        
        # GitHub Actions 환경변수 강제 적용
        source /etc/profile || true # profile 소싱 시도

    - name: Aggressive Clean and Build APK (Let Buildozer handle SDK entirely)
      run: |
        set -x # <--- ✨ 모든 명령어 실행 전 출력 (디버깅용) ✨

        echo "Debugging: Step starts here."
        echo "Debugging: Current working directory is $(pwd)" # 현재 작업 디렉토리 출력
        echo "Debugging: Contents of the GitHub workspace directory (${{ github.workspace }}):"
        ls -la ${{ github.workspace }} # <--- ✨ GitHub workspace의 내용물을 보여줘! ✨
        
        # Kivy 프로젝트 폴더로 이동 (이 폴더 안에 buildozer.spec이 있어야 함)
        cd ${{ github.workspace }}
        echo "Debugging: Successfully changed directory to ${{ github.workspace }}" # 디버깅 메시지

        # 강력한 클린업: 이전 빌드 흔적, 다운로드된 SDK/NDK, 모든 캐시 완전 삭제
        rm -rf .buildozer  # buildozer 작업 디렉토리 강제 삭제
        rm -rf ~/.buildozer # 사용자 홈 디렉토리의 buildozer 캐시도 삭제

        # Buildozer에게 모든 SDK/NDK 설치 및 라이선스 동의를 맡김!
        # buildozer.spec에 지정된 build_tools 버전을 사용 (이전에 설정했으므로 여기에 직접 넣지 않음)
        buildozer android debug

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: Jeommechu-APK
        path: bin/*.apk
        
    - name: Collect Full Build Logs (for debugging)
      if: always() # 빌드 성공/실패 여부와 상관없이 항상 로그 수집
      run: |
        cd ${{ github.workspace }}
        LOG_DIR=".buildozer/logs"
        if [ -d "$LOG_DIR" ]; then
            zip -r build_log.zip "$LOG_DIR"/*
            echo "Build log zipped successfully."
        else
            echo "Build log directory not found: $LOG_DIR"
            touch build_log.zip # 디렉토리가 없으면 빈 파일 생성
        fi
        
    - name: Upload Full Build Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: full-build-log
        path: build_log.zip
