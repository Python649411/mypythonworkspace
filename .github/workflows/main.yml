name: Build Kivy Android APK

on:
  push:
    branches: [ master ] # master 브랜치에 코드가 푸시될 때마다 워크플로우 실행
  pull_request:
    branches: [ master ] # master 브랜치로 풀 리퀘스트가 들어올 때 워크플로우 실행

jobs:
  build:
    runs-on: ubuntu-latest # GitHub가 제공하는 최신 Ubuntu 환경에서 실행

    steps:
    - uses: actions/checkout@v2 # 저장소 코드 체크아웃

    - name: Setup Java JDK
      uses: actions/setup-java@v2
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install Buildozer dependencies
      run: |
        sudo apt update
        sudo apt install -y git zip unzip python3-pip build-essential autoconf libtool screen
        
        pip install --user buildozer
        pip install cython

        echo "export PATH=$HOME/.local/bin:$PATH" >> ~/.bashrc
        source ~/.bashrc

    - name: Build Kivy Android APK and Setup PATH dynamically
      run: |
        cd ${{ github.workspace }}

        # 첫 번째 빌드 시도 (SDK/NDK 다운로드 및 설치 유도)
        # 이 단계에서 Buildozer가 필요한 파일들을 ~/.buildozer/android/platform 에 다운로드/설치함
        # --no-build 옵션은 실제 앱 빌드는 하지 않고, 환경 설정만 하도록 유도
        # || true 는 이 명령이 실패하더라도 다음 명령어를 실행하도록 함 (SDK/NDK가 없어서 실패하는 경우가 흔함)
        buildozer android debug --no-build --verbose || true 

        # Buildozer가 설치한 SDK/NDK 경로를 동적으로 찾아서 환경 변수에 설정
        # find 명령을 사용하여 정확한 설치 경로를 찾아냄
        export ANDROID_SDK_ROOT=$(find "$HOME/.buildozer/android/platform/" -maxdepth 1 -type d -name "android-sdk-*" | head -n 1)
        export ANDROID_NDK_HOME=$(find "$HOME/.buildozer/android/platform/" -maxdepth 1 -type d -name "android-ndk-r*" | head -n 1)
        
        # SDK 또는 NDK 경로를 찾지 못했다면 빌드 실패 처리
        if [ -z "$ANDROID_SDK_ROOT" ]; then
            echo "Error: Android SDK not found after initial buildozer run. Exiting."
            exit 1
        fi
        if [ -z "$ANDROID_NDK_HOME" ]; then
            echo "Error: Android NDK not found after initial buildozer run. Exiting."
            exit 1
        fi

        # 동적으로 찾은 SDK/NDK 경로와 Build-tools 버전을 PATH에 추가
        # build-tools 버전은 buildozer.spec의 android.api=33에 맞춰서 33.0.0으로 가정
        export PATH="$PATH:$ANDROID_SDK_ROOT/build-tools/33.0.0:$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin"

        # Android SDK 라이선스 동의 (Buildozer가 자동으로 하지 않는 경우 대비)
        # sdkmanager는 ANDROID_SDK_ROOT 환경 변수를 사용하여 SDK 루트를 찾음
        yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --licenses

        # buildozer.spec에 SDK/NDK 경로 강제 지정
        # sed 명령을 사용하여 buildozer.spec 파일에 android.sdk_path 와 android.ndk_path 값을 추가하거나 수정함
        # 이미 존재하는 줄을 찾아서 교체하거나, 없으면 추가함 (SDK path의 주석 라인을 검색해서 그 라인에 삽입)
        # sed -i "s|^#.*android.sdk_path.*|android.sdk_path = ${ANDROID_SDK_ROOT}|" buildozer.spec
        # sed -i "s|^#.*android.ndk_path.*|android.ndk_path = ${ANDROID_NDK_HOME}|" buildozer.spec
        # 만약 sed 명령이 잘 작동하지 않으면 다음 직접 추가 방식으로 변경 가능 (아래 2줄 대신)
        echo "android.sdk_path = ${ANDROID_SDK_ROOT}" >> buildozer.spec
        echo "android.ndk_path = ${ANDROID_NDK_HOME}" >> buildozer.spec

        # 최종 빌드 시도
        buildozer android debug

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: Jeommechu-APK
        path: bin/*.apk
