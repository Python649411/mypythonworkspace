name: Build Kivy Android APK (Ultimate Setup-Android Fix)

on:
  push:
    branches: [ master ] # master 브랜치에 코드가 푸시될 때마다 워크플로우 실행
  pull_request:
    branches: [ master ] # master 브랜치로 풀 리퀘스트가 들어올 때 워크플로우 실행

jobs:
  build:
    runs-on: ubuntu-latest # Docker 컨테이너 사용 안 함! (ContainerId 문제 해결)

    steps:
    - uses: actions/checkout@v2

    - name: Setup Java JDK (Java 17 for modern Android builds)
      uses: actions/setup-java@v2
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: Set up Python (Using Python 3.9)
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    # --- ✨ 강력한 Setup Android Action 사용! ✨ ---
    - name: Set up Android SDK and NDK (Ultimate Fix via specialized Action)
      uses: android-actions/setup-android@v2.0.0 # <--- ✨ 수정된 정확한 액션 이름! ✨
      with:
        api-level: 30 # buildozer.spec의 android.api와 동일하게 설정
        build-tools: 30.0.3 # buildozer.spec의 android.build_tools와 동일하게 설정
        cmake-version: 3.10.2 # Kivy/Buildozer가 필요로 하는 CMake 버전 (일반적으로 3.10 이상)
        ndk: r25b # Buildozer가 선호하는 NDK 버전 (안드로이드 NDK r25b)
        install-latest-platform-tools: true # 최신 platform-tools 설치
        
    - name: Install Buildozer dependencies
      run: |
        sudo apt update
        sudo apt install -y git zip unzip python3-pip build-essential autoconf libtool screen curl
        
        pip install --user buildozer
        pip install cython # Cython은 Kivy 컴파일에 필수

        echo "export PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV # Buildozer 명령어를 위해 PATH 추가
        echo "PATH=$PATH:$HOME/.local/bin" >> $GITHUB_ENV
        source /etc/profile || true # 환경변수 즉시 적용

    - name: Aggressive Clean (Before Buildozer run)
      run: |
        rm -rf .buildozer
        rm -rf ~/.buildozer

    - name: Build Android APK (Let Buildozer use pre-set SDK)
      run: |
        set -x # ✨ 모든 명령어 실행 전 출력 (디버깅용) ✨

        echo "Debugging: Starting buildozer android debug using setup-android provided SDK..."
        
        # setup-android 액션이 이미 모든 SDK/NDK를 설정했으므로, Buildozer는 이를 활용할 것임.
        buildozer android debug

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: Jeommechu-APK
        path: bin/*.apk
        
    - name: Collect Full Build Logs (for debugging)
      if: always() # 빌드 성공/실패 여부와 상관없이 항상 로그 수집
      run: |
        LOG_DIR=".buildozer/logs"
        if [ -d "$LOG_DIR" ]; then
            zip -r build_log.zip "$LOG_DIR"/*
            echo "Build log zipped successfully."
        else
            echo "Build log directory not found: $LOG_DIR"
            touch build_log.zip
        fi
        
    - name: Upload Full Build Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: full-build-log
        path: build_log.zip
