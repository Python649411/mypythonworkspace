name: Build Kivy Android APK (Ultimate Control - Forced SDK)

on:
  push:
    branches: [ master ] # master 브랜치에 코드가 푸시될 때마다 워크플로우 실행
  pull_request:
    branches: [ master ] # master 브랜치로 풀 리퀘스트가 들어올 때 워크플로우 실행

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup Java JDK (Java 17 for modern Android builds)
      uses: actions/setup-java@v2
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: Set up Python (Using Python 3.9)
      uses: actions/setup-python@v2
      with:
        python-version: '3.9' # Python 3.9로 고정 (Kivy/Buildozer와 가장 안정적인 버전)

    - name: Install Buildozer dependencies and prepare system tools
      run: |
        sudo apt update
        sudo apt install -y git zip unzip python3-pip build-essential autoconf libtool screen openjdk-17-jdk curl wget git-lfs # wget 추가
        git lfs install # git-lfs 초기화
        
        pip install --user buildozer
        pip install cython # Cython은 Kivy 컴파일에 필수

        echo "export PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV # .bashrc 대신 $GITHUB_ENV 사용
        echo "PATH=$PATH:$HOME/.local/bin" >> $GITHUB_ENV
        
        source /etc/profile || true # 환경변수 즉시 적용

    - name: Ultimate Android SDK/NDK Preparation (No more Buildozer auto-downloads)
      run: |
        set -x # ✨ 모든 명령어 실행 전 출력 (디버깅용) ✨

        echo "Debugging: Starting ultimate SDK preparation..."

        # 1. Android SDK 및 NDK 설치 경로 설정 (buildozer.spec과 동일하게)
        # buildozer.spec에 명시된 경로와 일치해야 함!
        export ANDROID_HOME="/home/runner/.buildozer/android/platform/android-sdk"
        export NDK_HOME="/home/runner/.buildozer/android/platform/android-ndk"
        export JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))

        mkdir -p $HOME/.android
        touch $HOME/.android/repositories.cfg # repositories.cfg 파일이 없으면 sdkmanager 오류

        # sdk.dir 설정 (gradle이 SDK를 찾도록)
        mkdir -p $HOME/.gradle
        echo "sdk.dir=${ANDROID_HOME}" >> $HOME/.gradle/gradle.properties

        # --- ✨ Step 1: Command-line Tools 강제 다운로드 및 설치 (sdkmanager 확보) ✨ ---
        echo "Debugging: Downloading specific Command-line Tools (8500642_latest)..."
        mkdir -p ${ANDROID_HOME}
        # 이전 버전 주소 사용 (자동 다운로드 404 문제 회피)
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-8500642_latest.zip -O android-cmdline-tools.zip
        unzip -q android-cmdline-tools.zip -d ${ANDROID_HOME}/temp_cmdline_tools # 임시 폴더에 압축 풀기
        mv ${ANDROID_HOME}/temp_cmdline_tools/cmdline-tools ${ANDROID_HOME}/cmdline-tools # 최종 경로로 이동

        # --- ✨ Step 2: NDK 강제 다운로드 및 설치 ✨ ---
        echo "Debugging: Downloading Android NDK (r25b)..."
        mkdir -p ${NDK_HOME}
        # NDK는 buildozer가 기본으로 사용하는 r25b 버전으로 직접 다운로드
        wget -q https://dl.google.com/android/repository/android-ndk-r25b-linux.zip -O android-ndk-r25b-linux.zip
        unzip -q android-ndk-r25b-linux.zip -d ${NDK_HOME}/.. # 부모 디렉토리에 압축 풀고 이동
        mv ${NDK_HOME}/../android-ndk-r25b ${NDK_HOME} # 최종 NDK 경로로 이동

        # --- ✨ Step 3: sdkmanager 사용을 위한 PATH 설정 및 필수 컴포넌트 설치 ✨ ---
        # SDK/NDK 경로를 시스템 PATH에 추가 (sdkmanager, adb 등 사용을 위해)
        export PATH="${ANDROID_HOME}/cmdline-tools/tools/bin:${ANDROID_HOME}/cmdline-tools/bin:${ANDROID_HOME}/platform-tools:$PATH"
        export PATH="${NDK_HOME}:$PATH" # NDK 경로도 PATH에 추가 (혹시 필요할까봐)
        
        echo "Debugging: PATH is now: $PATH"
        which sdkmanager || echo "sdkmanager might not be directly in PATH; checking..."
        SDKMANAGER_EXEC="${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager" # sdkmanager 정확한 경로 확보
        if [ ! -f "$SDKMANAGER_EXEC" ]; then # 없으면 구버전 경로 확인
            SDKMANAGER_EXEC="${ANDROID_HOME}/cmdline-tools/tools/bin/sdkmanager"
        fi
        if [ ! -f "$SDKMANAGER_EXEC" ]; then
            echo "Error: Final check failed, sdkmanager executable not found at expected path."
            exit 1
        fi
        echo "Debugging: sdkmanager executable found at: $SDKMANAGER_EXEC"

        # 필수 컴포넌트(platform-tools, build-tools;33.0.0) 강제 설치 및 라이선스 동의
        echo "Debugging: Force installing platform-tools, build-tools;33.0.0 and accepting all licenses using $SDKMANAGER_EXEC..."
        yes | "$SDKMANAGER_EXEC" "platform-tools" "build-tools;33.0.0" # Aidl not found 방지용!
        yes | "$SDKMANAGER_EXEC" --licenses # 나머지 모든 라이선스 동의

        echo "All critical Android SDK/NDK components are now force installed and licenses accepted."

    - name: Build Android APK (Final Call to Buildozer)
      run: |
        set -x # 모든 명령어 실행 전 출력 (디버깅용) ✨
        cd ${{ github.workspace }}
        # buildozer clean 명령 제거 (수동으로 디렉토리를 지웠으므로)
        # buildozer android debug 명령만 실행하여 APK 생성 (이제 SDK/NDK는 Buildozer가 건드릴 필요 없음)
        buildozer android debug

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: Jeommechu-APK
        path: bin/*.apk
        
    - name: Collect Full Build Logs (for debugging)
      if: always() # 빌드 성공/실패 여부와 상관없이 항상 로그 수집
      run: |
        cd ${{ github.workspace }}
        LOG_DIR=".buildozer/logs"
        if [ -d "$LOG_DIR" ]; then
            zip -r build_log.zip "$LOG_DIR"/*
            echo "Build log zipped successfully."
        else
            echo "Build log directory not found: $LOG_DIR"
            touch build_log.zip
        fi
        
    - name: Upload Full Build Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: full-build-log
        path: build_log.zip
