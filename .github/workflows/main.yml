name: Build Kivy Android APK (Ultimate Aidl Fix)

on:
  push:
    branches: [ master ] # master 브랜치에 코드가 푸시될 때마다 워크플로우 실행
  pull_request:
    branches: [ master ] # master 브랜치로 풀 리퀘스트가 들어올 때 워크플로우 실행

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup Java JDK (Java 17 for modern Android builds)
      uses: actions/setup-java@v2
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: Set up Python (Using Python 3.9)
      uses: actions/setup-python@v2
      with:
        python-version: '3.9' # Python 3.9로 고정 (Kivy/Buildozer와 가장 안정적인 버전)

    - name: Install Buildozer dependencies and Buildozer itself
      run: |
        sudo apt update
        sudo apt install -y git zip unzip python3-pip build-essential autoconf libtool screen openjdk-17-jdk curl # curl은 혹시 몰라 남겨둠
        
        pip install --user buildozer
        pip install cython # Cython은 Kivy 컴파일에 필수

        echo "export PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV # .bashrc 대신 $GITHUB_ENV 사용
        echo "PATH=$PATH:$HOME/.local/bin" >> $GITHUB_ENV
        
        source /etc/profile || true # 환경변수 즉시 적용

    - name: Aggressive Clean and Build APK (Root Fix for Aidl Issue)
      run: |
        set -x # ✨ 모든 명령어 실행 전 출력 (디버깅용) ✨

        echo "Debugging: Step starts here."
        echo "Debugging: Current working directory is $(pwd)"
        echo "Debugging: Contents of the GitHub workspace directory (${{ github.workspace }}):"
        ls -la ${{ github.workspace }}
        
        cd ${{ github.workspace }}
        echo "Debugging: Successfully changed directory to ${{ github.workspace }}"

        rm -rf .buildozer
        rm -rf ~/.buildozer

        # --- ✨ 강력한 Aidl/License Fix 전략 시작 ✨ ---
        # buildozer android update 명령을 제거하여 프리뷰 빌드 툴을 가져올 기회를 없앰!

        # 1. buildozer android debug 명령이 SDK를 다운로드하도록 강제 실행하여 sdkmanager를 확보
        # 이 명령은 sdkmanager를 다운로드하고 필요한 최소 환경을 설정할 것임
        # 하지만 apk 빌드는 아직 안될 것임 (build-tools 등을 수동으로 설정해야 하므로)
        echo "Debugging: Triggering buildozer once to ensure SDK/sdkmanager setup..."
        buildozer android debug --no-build # 빌드는 하지 않고 환경 설정만!

        # 2. Buildozer가 설치한 sdkmanager의 실제 경로를 찾아서 사용
        export ANDROID_HOME="$(find ~/.buildozer -maxdepth 4 -name 'android-sdk' | head -n 1)"
        if [ -z "$ANDROID_HOME" ]; then
            echo "Error: ANDROID_HOME not found after buildozer's initial setup."
            exit 1
        fi
        
        SDKMANAGER_PATH=""
        if [ -f "${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager" ]; then
            SDKMANAGER_PATH="${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager"
        elif [ -f "${ANDROID_HOME}/tools/bin/sdkmanager" ]; then # 구버전 sdkmanager 경로도 고려
            SDKMANAGER_PATH="${ANDROID_HOME}/tools/bin/sdkmanager"
        fi

        if [ -z "$SDKMANAGER_PATH" ]; then
            echo "Error: sdkmanager not found in expected paths within Buildozer's SDK."
            exit 1
        fi
        
        echo "Debugging: Found sdkmanager at: $SDKMANAGER_PATH"

        # 3. 직접 sdkmanager를 사용하여 원하는 build-tools와 platform-tools를 강제 설치하고 라이선스 동의
        echo "Debugging: Force installing platform-tools, build-tools;33.0.0 and accepting all licenses..."
        yes | "$SDKMANAGER_PATH" "platform-tools"
        yes | "$SDKMANAGER_PATH" "build-tools;33.0.0" # Aidl not found 방지용!
        yes | "$SDKMANAGER_PATH" --licenses # 나머지 모든 라이선스 동의

        echo "All critical Android SDK components are now forced installed and licenses accepted."
        # --- ✨ 강력한 Aidl/License Fix 전략 끝 ✨ ---

        # 4. 이제 모든 준비가 끝났으니, 최종 APK 빌드 시도
        buildozer android debug

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: Jeommechu-APK
        path: bin/*.apk
        
    - name: Collect Full Build Logs (for debugging)
      if: always() # 빌드 성공/실패 여부와 상관없이 항상 로그 수집
      run: |
        cd ${{ github.workspace }}
        LOG_DIR=".buildozer/logs"
        if [ -d "$LOG_DIR" ]; then
            zip -r build_log.zip "$LOG_DIR"/*
            echo "Build log zipped successfully."
        else
            echo "Build log directory not found: $LOG_DIR"
            touch build_log.zip
        fi
        
    - name: Upload Full Build Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: full-build-log
        path: build_log.zip
