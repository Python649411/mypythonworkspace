name: Build Kivy Android APK

on:
  push:
    branches: [ master ] # master 브랜치에 코드가 푸시될 때마다 워크플로우 실행
  pull_request:
    branches: [ master ] # master 브랜치로 풀 리퀘스트가 들어올 때 워크플로우 실행

jobs:
  build:
    runs-on: ubuntu-latest # GitHub가 제공하는 최신 Ubuntu 환경에서 실행

    steps:
    - uses: actions/checkout@v2 # 저장소 코드 체크아웃

    - name: Setup Java JDK
      uses: actions/setup-java@v2
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    # Buildozer 빌드 캐시를 위한 캐싱 스텝 추가 (SDK/NDK 재다운로드 방지)
    - name: Cache Buildozer downloads
      uses: actions/cache@v2
      with:
        path: |
          ${{ github.workspace }}/.buildozer/android/platform
          ${{ github.workspace }}/.buildozer/downloads
        key: buildozer-cache-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          buildozer-cache-

    - name: Install Buildozer dependencies
      run: |
        sudo apt update
        sudo apt install -y git zip unzip python3-pip build-essential autoconf libtool screen
        
        pip install --user buildozer
        pip install cython

        echo "export PATH=$HOME/.local/bin:$PATH" >> ~/.bashrc
        source ~/.bashrc

    - name: Build Kivy Android APK and Setup PATH dynamically
      run: |
        # 이 단계의 모든 명령은 Buildozer 빌드 프로세스의 일부로 실행되며
        # Buildozer가 자신의 빌드 환경 내에서 SDK/NDK를 찾도록 보장합니다.

        # Buildozer가 SDK/NDK를 ~/.buildozer/android/platform 에 설치하며, 이 경로는 내부적으로 관리됩니다.
        # 따라서 명시적인 ANDROID_SDK_ROOT와 ANDROID_NDK_HOME 설정은 Buildozer 내부 PATH 관리에 방해가 될 수 있습니다.
        # 대신, Buildozer가 자동으로 설치하고 관리하는 SDK의 bin 경로를 PATH에 추가하여 AIDL 등의 도구를 찾도록 합니다.

        # GitHub Actions 환경 변수에 Buildozer가 사용할 SDK/NDK 경로의 베이스를 추가
        # 이 경로들은 Buildozer가 SDK를 다운로드하여 설치하는 표준 위치임.
        export ANDROID_SDK_ROOT="${{ github.workspace }}/.buildozer/android/platform/android-sdk"
        # NDK 버전은 Buildozer가 설치하는 버전에 따라 다를 수 있으나, 일반적으로 r25b (NDK 25.2.9519653)가 사용됨
        export ANDROID_NDK_HOME="${{ github.workspace }}/.buildozer/android/platform/android-ndk-r25b"

        # Buildozer가 설치하는 build-tools/platform-tools/cmdline-tools 경로를 PATH에 추가
        # build-tools/33.0.0 은 buildozer.spec의 android.api=33에 맞춤
        export PATH="$PATH:$ANDROID_SDK_ROOT/build-tools/33.0.0:$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin"

        # Buildozer가 SDK를 다운로드하면 SDK 라이선스 동의를 자동으로 처리해야 하지만,
        # 경우에 따라 수동 동의가 필요할 수 있으므로 안전을 위해 추가 (sdkmanager는 ANDROID_SDK_ROOT 사용)
        SDKMANAGER_BIN="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
        if [ -f "$SDKMANAGER_BIN" ]; then
            yes | "$SDKMANAGER_BIN" --licenses || true # 오류가 나도 빌드를 중단하지 않도록 || true 추가
        fi

        # buildozer.spec에 SDK/NDK 경로를 강제 지정 (Buildozer가 명확히 참조하도록)
        # sed -i 대신 echo >> 를 사용하여 확실하게 추가. (기존 내용 삭제 후 새로 추가하는 방식)
        # 이미 파일 내에 해당 설정이 존재할 수 있으므로, .spec 파일의 특성을 고려하여 기존 설정 제거 후 추가
        sed -i '/^android\.sdk_path/d' buildozer.spec
        sed -i '/^android\.ndk_path/d' buildozer.spec
        echo "android.sdk_path = ${ANDROID_SDK_ROOT}" >> buildozer.spec
        echo "android.ndk_path = ${ANDROID_NDK_HOME}" >> buildozer.spec

        # 최종 빌드 실행 (Buildozer가 이제 SDK/NDK를 캐시에서 찾거나 다운로드 후 인식)
        # buildozer android debug 명령어가 실제 빌드를 시작하고 필요한 모든 SDK/NDK 요소를 처리합니다.
        buildozer android debug

    - name: Upload APK
      uses: actions/upload-artifact@v4 # 최신 버전 v4 사용
      with:
        name: Jeommechu-APK
        path: bin/*.apk # bin 폴더 아래에 있는 .apk 파일 업로드
