name: Build Kivy Android APK (Full Manual SDK with Java 17 JAXB Fix)

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    env: # ✨ JAXB Fix를 위해 JAVA_TOOL_OPTIONS 다시 추가! ✨
      ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true' 
      JAVA_TOOL_OPTIONS: "--add-modules java.xml.bind" # ✨ 핵심: JAXB 모듈 강제 추가! ✨

    steps:
    - uses: actions/checkout@v2

    - name: Setup Java JDK (Java 17 for SDK compatibility) # ✨ Java 11 -> Java 17로 다시 변경! ✨
      uses: actions/setup-java@v2
      with:
        distribution: 'zulu'
        java-version: '17' # <--- ✨ 이 라인을 17로 바꿔줘! ✨

    - name: Set up Python (3.9)
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    # ✨ android-actions/setup-android 액션 제거! 우리가 모든 것을 수동으로! ✨
    
    - name: Install Buildozer dependencies and prepare SDK environment
      run: |
        sudo apt update
        sudo apt install -y git zip unzip python3-pip build-essential autoconf libtool screen openjdk-17-jdk curl wget # wget 다시 추가
        
        pip install --user buildozer
        pip install cython

        echo "export PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV # Buildozer 명령어를 위해 PATH 추가
        echo "PATH=$PATH:$HOME/.local/bin" >> $GITHUB_ENV
        source /etc/profile || true # 환경변수 즉시 적용

    - name: Aggressive Clean (Before SDK/NDK preparation)
      run: |
        rm -rf .buildozer
        rm -rf ~/.buildozer

    - name: Prepare Android SDK and NDK (Full Manual Control)
      run: |
        set -x # ✨ 모든 명령어 실행 전 출력 (디버깅용) ✨

        echo "Debugging: Starting full manual SDK preparation..."

        # Buildozer가 사용하는 경로와 유사하게 설정
        export ANDROID_HOME="${{ github.workspace }}/.buildozer/android/platform/android-sdk"
        export NDK_HOME="${{ github.workspace }}/.buildozer/android/platform/android-ndk"
        
        mkdir -p $HOME/.android
        touch $HOME/.android/repositories.cfg # repositories.cfg 파일이 없으면 sdkmanager 오류

        # sdk.dir 설정 (gradle이 SDK를 찾도록)
        mkdir -p $HOME/.gradle
        echo "sdk.dir=${ANDROID_HOME}" >> $HOME/.gradle/gradle.properties

        # 1. Command-line Tools 다운로드 및 설치 (sdkmanager 포함)
        echo "Debugging: Downloading Command-line Tools..."
        # 최신 버전 링크 대신 좀 더 안정적인 예전 링크 사용 (404 회피)
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-6514228_latest.zip -O android-cmdline-tools.zip # ✨ 이 버전 링크로 변경! ✨
        unzip -q android-cmdline-tools.zip -d $HOME/cmdline-tools_temp
        mkdir -p ${ANDROID_HOME}
        mv $HOME/cmdline-tools_temp/cmdline-tools ${ANDROID_HOME}/cmdline-tools # tools 폴더명을 그대로 유지

        # 2. Android NDK (r25b) 다운로드 및 설치
        echo "Debugging: Downloading Android NDK (r25b)..."
        mkdir -p ${NDK_HOME}
        wget -q https://dl.google.com/android/repository/android-ndk-r25b-linux.zip -O android-ndk-r25b-linux.zip
        unzip -q android-ndk-r25b-linux.zip -d ${NDK_HOME}/.. # 부모 디렉토리에 압축 풀고 이동
        mv ${NDK_HOME}/../android-ndk-r25b ${NDK_HOME}

        # 3. SDK/NDK 경로를 시스템 PATH에 추가 (sdkmanager, adb 등 사용을 위해)
        export PATH="${ANDROID_HOME}/cmdline-tools/latest/bin:${ANDROID_HOME}/cmdline-tools/bin:${ANDROID_HOME}/platform-tools:${NDK_HOME}:$PATH" # ✨ cmdline-tools/latest 추가! ✨
        
        echo "Debugging: PATH is now: $PATH"
        
        # 4. 필수 컴포넌트(platform-tools, build-tools;30.0.3) 강제 설치 및 라이선스 동의
        echo "Debugging: Force installing platform-tools and build-tools;30.0.3 and accepting all licenses..."
        yes | sdkmanager "platform-tools" "build-tools;30.0.3" --licenses # ✨ sdkmanager 호출! ✨
        
        echo "All critical Android SDK components are now force installed and licenses accepted."

    - name: Build Android APK (Use fully prepared SDK)
      run: |
        set -x # ✨ 모든 명령어 실행 전 출력 (디버깅용) ✨

        echo "Debugging: Starting buildozer android debug using fully prepared SDK."
        
        buildozer android debug

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: Jeommechu-APK
        path: bin/*.apk
        
    - name: Collect Full Build Logs (for debugging)
      if: always() # 빌드 성공/실패 여부와 상관없이 항상 로그 수집
      run: |
        LOG_DIR=".buildozer/logs"
        if [ -d "$LOG_DIR" ]; then
            zip -r build_log.zip "$LOG_DIR"/*
            echo "Build log zipped successfully."
        else
            echo "Build log directory not found: $LOG_DIR"
            touch build_log.zip
        fi
        
    - name: Upload Full Build Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: full-build-log
        path: build_log.zip
