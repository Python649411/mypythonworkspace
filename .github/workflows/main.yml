name: Build Kivy Android APK (P4A Licenses Injection)

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    env: # ACTIONS_ALLOW_UNSECURE_COMMANDS가 여기에 있어야 함!
      ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true' 

    steps:
    - uses: actions/checkout@v2

    - name: Setup Java JDK (Java 17)
      uses: actions/setup-java@v2
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: Set up Python (3.9)
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    # ✨ 핵심: android-actions/setup-android 사용 (API 30, Build-Tools 30.0.3) ✨
    - name: Set up Android SDK and NDK via action
      uses: android-actions/setup-android@v3.0.0
      with:
        api-level: 30
        build-tools: 30.0.3
        # ndk: r25b # 이 라인은 삭제되었거나 주석 처리되어 있어야 함!
        cmake-version: 3.10.2
        install-latest-platform-tools: true 

    - name: Install Buildozer dependencies
      run: |
        sudo apt update
        sudo apt install -y git zip unzip python3-pip build-essential autoconf libtool screen curl
        
        pip install --user buildozer
        pip install cython

        echo "export PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV
        echo "PATH=$PATH:$HOME/.local/bin" >> $GITHUB_ENV
        source /etc/profile || true # 환경변수 즉시 적용

    - name: Aggressive Clean (Before Buildozer run)
      run: |
        rm -rf .buildozer
        rm -rf ~/.buildozer

    - name: Inject Android SDK Licenses to Buildozer's expected path # ✨ 핵심: 라이선스 파일 직접 주입 ✨
      run: |
        echo "Debugging: Injecting Android SDK licenses to Buildozer's expected path."
        mkdir -p ~/.buildozer/android/platform/android-sdk/cmdline-tools/latest/licenses
        # 필요한 모든 라이선스 동의 내용을 직접 파일로 생성
        echo "8933cc4baf7f848b8109f2561da75adeb978bb2a" > ~/.buildozer/android/platform/android-sdk/cmdline-tools/latest/licenses/android-sdk-license
        echo "84845ad39e2d6cf441f650216b5a363799d63a5f" >> ~/.buildozer/android/platform/android-sdk/cmdline-tools/latest/licenses/android-sdk-preview-license
        echo "83363b9a584c24379cc866b6c006b5093556d81a" >> ~/.buildozer/android/platform/android-sdk/cmdline-tools/latest/licenses/android-sdk-licenses
        echo "33703517cde4b32bc71901d81fde45366c3b6f2e" >> ~/.buildozer/android/platform/android-sdk/cmdline-tools/latest/licenses/google-gdk-license
        echo "d11ac4753c162657e17441544a49ed5f784e68e1" >> ~/.buildozer/android/platform/android-sdk/cmdline-tools/latest/licenses/android-googletv-license
        echo "d56f5187479451eabf01ebe78b67e0e84b9df09c" >> ~/.buildozer/android/platform/android-sdk/cmdline-tools/latest/licenses/android-wear-sdk-license
        echo "a876d75c960c1d636371c11065500e572049d594" >> ~/.buildozer/android/platform/android-sdk/cmdline-tools/latest/licenses/mips-license
        echo "746f3458ae586b510bd5ef69742118a1" >> ~/.buildozer/android/platform/android-sdk/cmdline-tools/latest/licenses/google-source-license
        echo "827e71396b2708b4b74f3ab623057e108e6b12a5" >> ~/.buildozer/android/platform/android-sdk/cmdline-tools/latest/licenses/intel-android-sysimage-license
        echo "258a1ccf074d008c2a969f66858e804f" >> ~/.buildozer/android/platform/android-sdk/cmdline-tools/latest/licenses/android-sdk-preview-license
        
        echo "Debugging: Android SDK licenses injected."

    - name: Build Android APK (Let Buildozer use pre-set SDK)
      run: |
        set -x # ✨ 모든 명령어 실행 전 출력 (디버깅용) ✨

        echo "Debugging: Starting buildozer android debug using android-actions/setup-android provided SDK..."
        
        # Buildozer가 스스로 SDK를 찾아 빌드할 것임. 라이선스 파일 주입으로 Aidl 문제 해결 기대.
        buildozer android debug

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: Jeommechu-APK
        path: bin/*.apk
        
    - name: Collect Full Build Logs (for debugging)
      if: always() # 빌드 성공/실패 여부와 상관없이 항상 로그 수집
      run: |
        LOG_DIR=".buildozer/logs"
        if [ -d "$LOG_DIR" ]; then
            zip -r build_log.zip "$LOG_DIR"/*
            echo "Build log zipped successfully."
        else
            echo "Build log directory not found: $LOG_DIR"
            touch build_log.zip
        fi
        
    - name: Upload Full Build Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: full-build-log
        path: build_log.zip
