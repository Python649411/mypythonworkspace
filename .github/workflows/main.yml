name: Build Kivy Android APK (Docker Strategy - Fix CD)

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: "circleci/android:api-29-node" # 이미지 유지
      options: --user root # 컨테이너 내에서 권한 문제 해결을 위해 root 권한으로 실행

    steps:
    - uses: actions/checkout@v2 # 여기에 path: 없음 -> 기본 경로 /github/workspace에 체크아웃됨

    - name: Set up Python (Using Python 3.9) # python/setup-python 액션만 사용
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install Buildozer dependencies (inside Docker container)
      run: |
        # 여기서는 이미 /github/workspace가 현재 작업 디렉토리로 설정되어 있다고 가정
        # 즉, cd /github/workspace 명령이 더 이상 필요 없음
        
        # apt update && apt install -y는 Dockerfile 단계에서 이루어지는 것이 가장 이상적
        # 하지만 여기서 필요한 필수 패키지만 추가
        apt update && apt install -y git zip unzip # Buildozer 필수 의존성
        
        # pip install --user buildozer 대신 buildozer 명령어 바로 실행 가능하도록
        pip install buildozer
        pip install cython

        # GITHUB_ENV를 통해 PATH에 추가하지 않고, buildozer 실행 전에 경로를 직접 지정
        # 이 단계에서만 유효한 PATH 설정

    - name: Aggressive Clean (Before Buildozer run)
      run: |
        # 이 단계 역시 현재 작업 디렉토리가 /github/workspace임을 가정
        rm -rf .buildozer
        rm -rf ~/.buildozer

    - name: Build Android APK (using pre-installed SDK in Docker)
      run: |
        set -x # ✨ 모든 명령어 실행 전 출력 (디버깅용) ✨

        echo "Debugging: Starting buildozer android debug directly using Docker environment..."
        # 이 단계 역시 현재 작업 디렉토리가 /github/workspace임을 가정
        
        # Buildozer에게 모든 SDK/NDK 다운로드, 설치, 라이선스 동의를 맡김.
        # 컨테이너에 SDK가 이미 있으므로, Buildozer는 기존 SDK를 활용할 것임.
        buildozer android debug

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: Jeommechu-APK
        path: bin/*.apk
        
    - name: Collect Full Build Logs (for debugging)
      if: always() # 빌드 성공/실패 여부와 상관없이 항상 로그 수집
      run: |
        # 이 단계 역시 현재 작업 디렉토리가 /github/workspace임을 가정
        LOG_DIR=".buildozer/logs"
        if [ -d "$LOG_DIR" ]; then
            zip -r build_log.zip "$LOG_DIR"/*
            echo "Build log zipped successfully."
        else
            echo "Build log directory not found: $LOG_DIR"
            touch build_log.zip
        fi
        
    - name: Upload Full Build Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: full-build-log
        path: build_log.zip
